AWSTemplateFormatVersion: "2010-09-09"
Description: "API Pulse Lambda Worker Infrastructure"

Parameters:
  SupabaseUrl:
    Type: String
    Description: Supabase project URL
    Default: https://your-project.supabase.co

  SupabaseServiceRoleKey:
    Type: String
    Description: Supabase service role key (stored in Parameter Store)
    NoEcho: true

  SQSQueueNames:
    Type: CommaDelimitedList
    Description: List of SQS queue names to process
    Default: "development-api-pulse-monitor-checks.fifo,production-api-pulse-priority-checks,production-api-pulse-alerts"

  Environment:
    Type: String
    Description: Environment name
    Default: production
    AllowedValues: [development, staging, production]

Resources:
  # IAM Role for Lambda function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "api-pulse-lambda-worker-role-${Environment}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
      Policies:
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource: !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:api-pulse-*"
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  # Lambda function
  MonitorWorkerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "api-pulse-monitor-worker-${Environment}"
      Runtime: nodejs18.x
      Handler: monitor-worker.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('Placeholder function - update with actual code');
            return { statusCode: 200, body: 'Hello from Lambda!' };
          };
      Timeout: 300 # 5 minutes max execution time
      MemorySize: 512
      ReservedConcurrentExecutions: 50 # Limit concurrent executions
      Environment:
        Variables:
          SUPABASE_URL: !Ref SupabaseUrl
          SUPABASE_SERVICE_ROLE_KEY: !Ref SupabaseServiceRoleKey
          USER_AGENT: "API-Pulse-Lambda-Worker/1.0"
          ENVIRONMENT: !Ref Environment
      DeadLetterConfig:
        TargetArn: !GetAtt DeadLetterQueue.Arn
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: api-pulse
        - Key: Component
          Value: monitor-worker

  # Dead Letter Queue for failed Lambda executions
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "api-pulse-lambda-dlq-${Environment}"
      MessageRetentionPeriod: 1209600 # 14 days
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: api-pulse

  # Log Group for Lambda function
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/api-pulse-monitor-worker-${Environment}"
      RetentionInDays: 30

  # SQS Event Source Mappings for the Lambda function
  MonitorChecksEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:api-pulse-monitor-checks"
      FunctionName: !Ref MonitorWorkerFunction
      BatchSize: 10
      MaximumBatchingWindowInSeconds: 5
      FunctionResponseTypes:
        - ReportBatchItemFailures

  PriorityChecksEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:api-pulse-priority-checks"
      FunctionName: !Ref MonitorWorkerFunction
      BatchSize: 5
      MaximumBatchingWindowInSeconds: 1
      FunctionResponseTypes:
        - ReportBatchItemFailures

  AlertsEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:api-pulse-alerts"
      FunctionName: !Ref MonitorWorkerFunction
      BatchSize: 10
      MaximumBatchingWindowInSeconds: 5
      FunctionResponseTypes:
        - ReportBatchItemFailures

  # CloudWatch Alarms for monitoring
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "api-pulse-lambda-errors-${Environment}"
      AlarmDescription: "Lambda function error rate alarm"
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref MonitorWorkerFunction

  LambdaDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "api-pulse-lambda-duration-${Environment}"
      AlarmDescription: "Lambda function duration alarm"
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 3
      Threshold: 30000 # 30 seconds
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref MonitorWorkerFunction

  # CloudWatch Dashboard for monitoring
  MonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "api-pulse-lambda-${Environment}"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${MonitorWorkerFunction}" ],
                  [ ".", "Errors", ".", "." ],
                  [ ".", "Duration", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Lambda Function Metrics"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SQS", "NumberOfMessagesSent", "QueueName", "api-pulse-monitor-checks" ],
                  [ ".", "NumberOfMessagesReceived", ".", "." ],
                  [ ".", "NumberOfMessagesDeleted", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "SQS Queue Metrics"
              }
            }
          ]
        }

Outputs:
  LambdaFunctionArn:
    Description: "Lambda function ARN"
    Value: !GetAtt MonitorWorkerFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-lambda-arn"

  LambdaFunctionName:
    Description: "Lambda function name"
    Value: !Ref MonitorWorkerFunction
    Export:
      Name: !Sub "${AWS::StackName}-lambda-name"

  DeadLetterQueueUrl:
    Description: "Dead Letter Queue URL"
    Value: !Ref DeadLetterQueue
    Export:
      Name: !Sub "${AWS::StackName}-dlq-url"

  LambdaExecutionRoleArn:
    Description: "Lambda execution role ARN"
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-role-arn"
